#!/usr/bin/env python
# Source is GPL


test="LINESTRING(6.44719 46.83028,6.44735 46.83045,6.44787 46.83108,6.44832 46.83157,6.44848 46.83172,6.45038 46.83287,6.45048 46.83292,6.45079 46.83294,6.4516599999999995 46.832770000000004,6.4518699999999995 46.83276,6.452229999999999 46.83279,6.454289999999999 46.83325,6.45459 46.83346,6.45496 46.83386,6.45534 46.8345,6.4553899999999995 46.834849999999996,6.45517 46.83559999999999,6.4551 46.83575999999999,6.45473 46.83619999999999,6.45407 46.83702999999999,6.45397 46.83724999999999,6.45395 46.83732999999999,6.45397 46.83741999999999,6.45364 46.83751999999999,6.45361 46.837439999999994,6.453270000000001 46.83736,6.452800000000001 46.83714,6.45234 46.83688,6.4516 46.83653,6.45134 46.83621,6.45107 46.835950000000004,6.45069 46.83567000000001,6.44977 46.835100000000004,6.4495 46.834920000000004,6.44935 46.83476,6.44911 46.83467,6.4488 46.83462,6.44845 46.834630000000004,6.44798 46.834590000000006,6.447690000000001 46.834520000000005,6.447500000000001 46.834410000000005,6.447150000000001 46.834140000000005,6.446860000000001 46.83395,6.446280000000001 46.83373,6.445970000000001 46.83368,6.445800000000001 46.8337,6.445630000000001 46.83363,6.445440000000001 46.83347,6.445310000000001 46.8333,6.445130000000001 46.83299,6.445050000000001 46.83268,6.444580000000001 46.83240000000001,6.444390000000001 46.832260000000005,6.4440300000000015 46.83189000000001,6.443670000000002 46.831590000000006,6.443530000000002 46.83151000000001,6.443410000000002 46.83137000000001,6.443410000000002 46.83128000000001,6.443620000000002 46.83072000000001,6.443620000000002 46.83061000000001,6.443150000000002 46.83015000000001,6.443110000000002 46.83008000000001,6.443100000000002 46.83000000000001,6.443210000000002 46.829920000000016,6.443340000000003 46.82989000000001,6.444230000000003 46.829990000000016,6.4445200000000025 46.830030000000015,6.445090000000002 46.830230000000014,6.445510000000002 46.830320000000015,6.447190000000003 46.830280000000016)"
test2="LINESTRING(6.06847 46.50761,6.06853 46.50764,6.0687 46.50772,6.06886 46.50779,6.06975 46.50837,6.07027 46.50886,6.07032 46.508939999999996,6.07036 46.509029999999996,6.07039 46.50908999999999,6.0704199999999995 46.509249999999994,6.07044 46.509339999999995,6.07091 46.50953,6.07128 46.50963,6.07148 46.50968,6.07164 46.509730000000005,6.071910000000001 46.50987000000001,6.072700000000001 46.51028000000001,6.073000000000001 46.51047000000001,6.073270000000002 46.51064000000001,6.073610000000001 46.51089000000001,6.074070000000002 46.51124000000001,6.074300000000002 46.51144000000001,6.0745200000000015 46.51160000000001,6.074710000000001 46.51172000000001,6.074810000000001 46.51180000000001,6.074890000000001 46.51185000000001,6.075140000000001 46.51196000000001,6.075320000000001 46.51203000000001,6.075440000000001 46.51206000000001,6.075620000000002 46.512090000000015,6.075830000000002 46.51214000000002,6.075930000000001 46.512180000000015,6.075990000000002 46.512200000000014,6.076040000000002 46.512250000000016,6.076110000000002 46.51232000000002,6.076170000000002 46.51241000000002,6.076200000000002 46.51250000000002,6.076220000000002 46.512580000000014,6.076210000000002 46.51266000000001,6.076200000000003 46.51274000000001,6.076200000000003 46.51281000000001,6.076210000000002 46.51288000000001,6.0762300000000025 46.51291000000001,6.076270000000003 46.51295000000001,6.076330000000003 46.51299000000001,6.076440000000003 46.51304000000001,6.076610000000003 46.51310000000001,6.076730000000003 46.51315000000001,6.0768600000000035 46.51320000000001,6.076970000000004 46.51325000000001,6.077080000000004 46.51331000000001,6.077490000000004 46.51360000000001,6.077590000000003 46.51366000000001,6.077670000000003 46.51369000000001,6.077770000000003 46.51374000000001,6.0778700000000025 46.51376000000001,6.077980000000003 46.513790000000014,6.078150000000003 46.51382000000002,6.078250000000002 46.51385000000002,6.078390000000002 46.51392000000002,6.078500000000003 46.51400000000002,6.078580000000002 46.514080000000014,6.0786700000000025 46.51419000000001,6.078730000000003 46.51427000000001,6.078770000000003 46.51435000000001,6.0788300000000035 46.51444000000001,6.0789000000000035 46.51451000000001,6.079060000000004 46.51463000000001,6.0791600000000034 46.51470000000001,6.079270000000004 46.51481000000001,6.079380000000004 46.51492000000001,6.079480000000004 46.51503000000001,6.079610000000004 46.51514000000001,6.0797200000000045 46.51523000000001,6.079780000000005 46.51529000000001,6.079830000000005 46.515370000000004,6.079880000000005 46.51545,6.079890000000004 46.51552,6.079890000000004 46.51559,6.079850000000004 46.51565,6.079790000000004 46.51572,6.079720000000004 46.51577,6.079640000000004 46.515820000000005,6.079540000000004 46.51586,6.079440000000004 46.515890000000006,6.079310000000004 46.51592000000001,6.079110000000004 46.515980000000006,6.078980000000003 46.51603000000001,6.078840000000003 46.51608000000001,6.078720000000003 46.51611000000001,6.0786200000000035 46.516120000000015,6.078520000000004 46.516120000000015,6.078420000000004 46.516120000000015,6.078330000000004 46.51609000000001,6.078250000000004 46.51608000000001,6.078200000000004 46.51610000000001,6.078160000000004 46.51611000000001,6.078120000000004 46.516140000000014,6.0780800000000035 46.51618000000001,6.078060000000003 46.516230000000014,6.078060000000003 46.516280000000016,6.0780800000000035 46.516340000000014,6.078120000000004 46.516460000000016,6.0782200000000035 46.51665000000002,6.0782900000000035 46.51674000000002,6.0783600000000035 46.51684000000002,6.078440000000003 46.51693000000002,6.078560000000003 46.51710000000002,6.0786900000000035 46.51730000000002,6.0789000000000035 46.51771000000002,6.078930000000003 46.51777000000002,6.078930000000003 46.51783000000002,6.078920000000004 46.517890000000016,6.078890000000004 46.51797000000001,6.078800000000004 46.51808000000001,6.0787600000000035 46.51813000000001,6.078680000000004 46.51817000000001,6.078570000000004 46.518200000000014,6.078440000000003 46.51824000000001,6.078340000000003 46.518270000000015,6.078230000000003 46.51832000000002,6.078170000000003 46.518380000000015,6.0781300000000025 46.51844000000001,6.078110000000002 46.51850000000001,6.078110000000002 46.51856000000001,6.078170000000003 46.518640000000005,6.0782700000000025 46.51878000000001,6.078720000000002 46.51879000000001,6.079270000000002 46.51915000000001,6.080240000000002 46.51969000000001,6.080590000000002 46.51997000000001,6.080910000000002 46.52018000000001,6.081450000000002 46.52034000000001,6.082140000000002 46.520640000000014,6.082320000000002 46.520930000000014,6.082450000000002 46.521130000000014,6.0826100000000025 46.52132000000002,6.083030000000003 46.521450000000016,6.083370000000002 46.52179000000002,6.0838300000000025 46.522230000000015,6.084880000000003 46.522950000000016,6.086090000000003 46.52399000000002,6.086590000000003 46.52431000000002,6.087010000000003 46.52437000000002,6.087720000000003 46.52475000000002,6.088800000000003 46.52558000000002,6.089280000000002 46.52600000000002,6.089280000000002 46.52611000000002,6.089310000000002 46.52630000000002,6.089030000000002 46.52645000000002,6.088720000000002 46.52681000000002,6.088510000000002 46.52722000000002,6.088110000000002 46.52804000000002,6.087950000000002 46.52844000000002,6.087870000000002 46.528660000000016,6.087720000000003 46.52883000000001,6.0873500000000025 46.529060000000015,6.087040000000003 46.52921000000001,6.0868100000000025 46.52932000000001,6.086590000000003 46.52945000000001,6.086460000000002 46.52952000000001,6.0863400000000025 46.52954000000001,6.086040000000002 46.52952000000001,6.085930000000002 46.529530000000015,6.085810000000002 46.529550000000015,6.085710000000002 46.52968000000001,6.0855900000000025 46.529890000000016,6.085240000000002 46.53041000000002,6.0851200000000025 46.53060000000002,6.085070000000003 46.53076000000002,6.085110000000003 46.530860000000025,6.085240000000003 46.531080000000024,6.085270000000003 46.531220000000026,6.085230000000003 46.53136000000003,6.084870000000003 46.53195000000003,6.0843900000000035 46.53274000000003,6.084140000000003 46.53292000000003,6.083910000000003 46.53298000000003,6.083680000000003 46.532990000000034,6.083570000000003 46.532950000000035,6.083510000000002 46.532930000000036,6.083340000000002 46.532790000000034,6.083140000000002 46.532730000000036,6.083070000000002 46.53271000000004,6.082990000000002 46.532700000000034,6.082900000000002 46.532700000000034,6.082830000000002 46.53271000000004,6.082780000000002 46.532730000000036,6.0827500000000025 46.532750000000036,6.082720000000003 46.532790000000034,6.082690000000003 46.53285000000003,6.082670000000003 46.53290000000003,6.082640000000003 46.53321000000003,6.083150000000003 46.53354000000003,6.083260000000004 46.53368000000003,6.083270000000003 46.53386000000003,6.083290000000003 46.534090000000035,6.083330000000004 46.534160000000035,6.083390000000004 46.53422000000003,6.083470000000004 46.534270000000035,6.083550000000003 46.534290000000034,6.083650000000003 46.53426000000003,6.083730000000003 46.53422000000003,6.083770000000003 46.534180000000035,6.084010000000003 46.533980000000035,6.084400000000003 46.53375000000003,6.0847900000000035 46.533620000000035,6.084970000000004 46.53361000000003,6.085160000000004 46.533620000000035,6.0855400000000035 46.533730000000034,6.085920000000003 46.53388000000003,6.086170000000004 46.53413000000003,6.086450000000004 46.534360000000035,6.086660000000004 46.534450000000035,6.086850000000004 46.53455000000004,6.086960000000004 46.53469000000004,6.087020000000004 46.534880000000044,6.087070000000004 46.534950000000045,6.087160000000004 46.53499000000004,6.087400000000004 46.53507000000004,6.087900000000004 46.53524000000004,6.088100000000004 46.53538000000004,6.0883300000000045 46.53567000000004,6.088380000000004 46.535840000000036,6.0884000000000045 46.536040000000035,6.088460000000005 46.536170000000034,6.0886800000000045 46.53643000000003,6.088730000000004 46.53665000000003,6.088730000000004 46.53685000000003,6.089030000000005 46.53712000000003,6.089350000000005 46.53730000000003,6.089720000000005 46.53744000000003,6.090210000000005 46.53744000000003,6.090440000000005 46.537490000000034,6.090630000000005 46.53759000000004,6.091050000000005 46.53797000000004,6.091080000000005 46.538100000000036,6.091190000000005 46.53825000000003,6.091310000000005 46.538370000000036,6.091550000000005 46.538590000000035,6.091660000000005 46.538770000000035,6.091700000000006 46.539170000000034,6.091730000000005 46.53994000000004,6.091910000000006 46.54037000000004,6.092060000000005 46.54095000000004,6.092090000000005 46.54133000000004,6.092330000000005 46.54156000000004,6.092710000000005 46.54194000000004,6.093080000000005 46.54230000000004,6.093290000000005 46.54262000000004,6.093320000000005 46.54290000000004,6.093340000000005 46.54305000000004,6.093440000000005 46.543160000000036,6.093680000000004 46.54332000000004,6.0938900000000045 46.54351000000004,6.094210000000005 46.54385000000004,6.094530000000005 46.54405000000004,6.094670000000005 46.54416000000004,6.0947300000000055 46.54425000000004,6.094740000000005 46.54437000000004,6.094670000000005 46.54454000000004,6.094580000000005 46.54466000000004,6.094500000000005 46.544760000000046,6.094410000000005 46.544910000000044,6.094350000000005 46.545070000000045,6.094250000000005 46.545360000000045,6.094150000000005 46.54550000000005,6.094100000000005 46.545580000000044,6.094060000000005 46.54569000000004,6.093720000000006 46.545940000000044,6.093380000000006 46.54609000000004,6.093190000000006 46.54609000000004,6.093070000000006 46.54611000000004,6.092990000000007 46.546120000000045,6.092910000000007 46.54615000000005,6.092830000000007 46.546190000000045,6.092750000000008 46.54625000000004,6.0926600000000075 46.54634000000004,6.092310000000007 46.546770000000045,6.092270000000007 46.54681000000004,6.092220000000007 46.546840000000046,6.092110000000007 46.546880000000044,6.091870000000007 46.54696000000004,6.091750000000007 46.54700000000004,6.091670000000008 46.54703000000004,6.091620000000008 46.547060000000045,6.091570000000008 46.54710000000004,6.0915100000000075 46.547150000000045,6.091000000000007 46.548000000000044,6.089730000000007 46.54893000000004,6.089210000000008 46.549430000000044,6.089130000000008 46.549500000000045,6.088580000000008 46.54998000000005,6.0884800000000086 46.550150000000045,6.088320000000008 46.550530000000045,6.088290000000009 46.55081000000004,6.088090000000008 46.55114000000004,6.087900000000008 46.55135000000004,6.0878700000000086 46.55170000000004,6.087920000000008 46.55202000000004,6.0878000000000085 46.55228000000004,6.087320000000009 46.552830000000036,6.087180000000009 46.552980000000034,6.087170000000009 46.553100000000036,6.087200000000009 46.55324000000004,6.087160000000009 46.55340000000004,6.086310000000009 46.55403000000004,6.086000000000009 46.55417000000004,6.085940000000009 46.554200000000044,6.085790000000009 46.554250000000046,6.085690000000009 46.554290000000044,6.085580000000009 46.55435000000004,6.0855000000000095 46.55442000000004,6.085440000000009 46.55450000000004,6.085320000000009 46.55467000000004,6.085210000000009 46.554820000000035,6.0851500000000085 46.55501000000004,6.085090000000008 46.555180000000036,6.085060000000008 46.555250000000036,6.085000000000008 46.55530000000004,6.084930000000008 46.55535000000004,6.084840000000008 46.55539000000004,6.084700000000008 46.55544000000004,6.084530000000008 46.55550000000004,6.084360000000008 46.55557000000004,6.084240000000008 46.555630000000036,6.084120000000008 46.55570000000004,6.084050000000008 46.55577000000004,6.084020000000009 46.55584000000004,6.0840000000000085 46.55593000000004,6.084030000000008 46.55603000000004,6.084100000000008 46.556150000000045,6.0841400000000085 46.556220000000046,6.084160000000009 46.556280000000044,6.084190000000008 46.55639000000004,6.084200000000008 46.55648000000004,6.084210000000008 46.55663000000004,6.0842600000000076 46.55679000000004,6.084360000000007 46.55696000000004,6.084670000000007 46.55737000000004,6.084780000000007 46.55762000000004,6.0848000000000075 46.557760000000044,6.084760000000007 46.557850000000045,6.0847300000000075 46.55791000000004,6.084670000000007 46.557960000000044,6.084580000000007 46.55798000000004,6.084500000000007 46.557990000000046,6.084430000000007 46.557960000000044,6.084360000000007 46.55791000000004,6.084300000000007 46.557830000000045,6.0842400000000065 46.55773000000004,6.084190000000007 46.55757000000004,6.0841700000000065 46.55745000000004,6.084160000000007 46.557330000000036,6.084150000000007 46.557240000000036,6.084090000000007 46.557170000000035,6.084010000000007 46.55711000000004,6.0839100000000075 46.55709000000004,6.083810000000008 46.55709000000004,6.083730000000008 46.557130000000036,6.083680000000008 46.55716000000004,6.083660000000008 46.55725000000004,6.083700000000008 46.55735000000004,6.083820000000008 46.557490000000044,6.083880000000009 46.55760000000004,6.083900000000009 46.55771000000004,6.083910000000008 46.557870000000044,6.083910000000008 46.558030000000045,6.083870000000008 46.55817000000005,6.083880000000008 46.55829000000005,6.0839100000000075 46.55838000000005,6.0839800000000075 46.55849000000005,6.084070000000008 46.55859000000005,6.084200000000008 46.55866000000005,6.084320000000008 46.55872000000005,6.084400000000008 46.55880000000005,6.084500000000007 46.55898000000005,6.084900000000007 46.559400000000046,6.084940000000008 46.55947000000005,6.084970000000007 46.55959000000005,6.084960000000008 46.55968000000005,6.084940000000008 46.55976000000005,6.084940000000008 46.55986000000005,6.085020000000007 46.56003000000005,6.085400000000007 46.56046000000005,6.085450000000007 46.56053000000005,6.085590000000007 46.56061000000005,6.085740000000007 46.56075000000005,6.085840000000006 46.560900000000046,6.085960000000006 46.56093000000005,6.086060000000006 46.56096000000005,6.086110000000006 46.560990000000054,6.086210000000006 46.561080000000054,6.0862600000000056 46.56110000000005,6.086350000000006 46.56112000000005,6.086490000000006 46.561130000000055,6.086580000000006 46.56114000000006,6.0866600000000055 46.56117000000006,6.086790000000006 46.561270000000064,6.086860000000006 46.561290000000064,6.086940000000006 46.56131000000006,6.087250000000005 46.56135000000006,6.087360000000006 46.561380000000064,6.087440000000005 46.56142000000006,6.087550000000006 46.56144000000006,6.0877400000000055 46.56148000000006,6.0880900000000056 46.56153000000006,6.088190000000005 46.56155000000006,6.088310000000005 46.56161000000006,6.088510000000006 46.56173000000006,6.088650000000006 46.56179000000006,6.088790000000006 46.56185000000006,6.088910000000006 46.561910000000054,6.089010000000005 46.56199000000005,6.089220000000005 46.56227000000005,6.089260000000006 46.562710000000045,6.0893100000000056 46.563020000000044,6.089600000000005 46.563400000000044,6.089830000000005 46.563850000000045,6.090170000000005 46.56446000000005,6.090500000000005 46.56460000000005,6.091020000000005 46.564570000000046,6.0913800000000045 46.564520000000044,6.091850000000004 46.564520000000044,6.092070000000004 46.564680000000045,6.092420000000004 46.564900000000044,6.092830000000004 46.565100000000044,6.093030000000004 46.565310000000046,6.093310000000004 46.56563000000005,6.093340000000004 46.56592000000005,6.092830000000004 46.56664000000005,6.092700000000003 46.56670000000005,6.091330000000004 46.56720000000005,6.091250000000004 46.56735000000005,6.091250000000004 46.56756000000005,6.091550000000004 46.56814000000005,6.091560000000004 46.56858000000005,6.091560000000004 46.56888000000005,6.0917800000000035 46.56903000000005,6.091900000000003 46.56915000000005,6.091970000000003 46.56924000000005,6.092020000000003 46.569340000000054,6.092060000000004 46.56944000000006,6.092120000000004 46.569590000000055,6.092200000000004 46.56976000000005,6.092280000000003 46.56989000000005,6.092410000000004 46.570080000000054,6.0924600000000035 46.570130000000056,6.092510000000003 46.57019000000005,6.092580000000003 46.57025000000005,6.092680000000003 46.57032000000005,6.092840000000003 46.57040000000005,6.0929300000000035 46.57046000000005,6.093170000000003 46.570680000000046,6.093430000000003 46.57089000000005,6.093600000000003 46.57103000000005,6.093910000000003 46.57117000000005,6.0941300000000025 46.57119000000005,6.094260000000003 46.57114000000005,6.094380000000003 46.57110000000005,6.094460000000002 46.57090000000005,6.094640000000003 46.57041000000005,6.094800000000003 46.57016000000005,6.094960000000003 46.57005000000005,6.095130000000003 46.57004000000005,6.095330000000003 46.57005000000005,6.095500000000003 46.570170000000054,6.095710000000003 46.57027000000006,6.095880000000003 46.57030000000006,6.096090000000003 46.57023000000006,6.096680000000003 46.56986000000006,6.096960000000003 46.56975000000006,6.097170000000003 46.56970000000006,6.097410000000003 46.56972000000006,6.097670000000003 46.569820000000064,6.097880000000003 46.57006000000006,6.097940000000003 46.570250000000065,6.097890000000003 46.570580000000064,6.097990000000003 46.57093000000006,6.097960000000003 46.57138000000006,6.098090000000004 46.57167000000006,6.0981400000000034 46.57174000000006,6.098520000000003 46.57212000000006,6.098870000000003 46.57241000000006,6.099320000000003 46.57257000000006,6.099590000000004 46.57261000000006,6.099840000000004 46.57265000000006,6.100040000000004 46.57279000000006,6.100210000000004 46.57296000000006,6.100320000000004 46.573240000000055,6.100300000000004 46.57348000000005,6.100240000000004 46.573550000000054,6.100200000000004 46.57368000000005,6.100260000000004 46.57377000000005,6.100520000000004 46.57386000000005,6.101080000000004 46.573960000000056,6.101540000000004 46.57410000000006,6.101840000000005 46.57422000000006,6.1019600000000045 46.57444000000006,6.102160000000005 46.57454000000006,6.102430000000005 46.574590000000065,6.102640000000005 46.57472000000006,6.1030600000000055 46.57505000000006,6.103400000000005 46.575150000000065,6.103710000000005 46.57523000000006,6.103960000000005 46.57541000000006,6.104030000000005 46.57561000000006,6.104010000000005 46.57594000000006,6.103890000000005 46.57629000000006,6.1039500000000055 46.576530000000055,6.104250000000006 46.57668000000005,6.105070000000006 46.57686000000005,6.105620000000005 46.57714000000005,6.106230000000005 46.57728000000005,6.106780000000005 46.57753000000005,6.107280000000005 46.578160000000054,6.107840000000005 46.578520000000054,6.108210000000005 46.578770000000056,6.108390000000005 46.57896000000006,6.108330000000005 46.57917000000006,6.108170000000005 46.57930000000006,6.107740000000005 46.57951000000006,6.107570000000005 46.57970000000007,6.1076800000000055 46.57997000000007,6.107630000000006 46.580100000000066,6.107320000000006 46.58020000000007,6.107200000000006 46.580280000000066,6.107180000000006 46.580430000000064,6.107270000000006 46.58056000000006,6.107560000000006 46.580750000000066,6.107840000000006 46.581020000000066,6.107860000000006 46.581170000000064,6.107830000000006 46.58130000000006,6.107740000000006 46.581440000000065,6.107640000000006 46.58152000000006,6.107530000000006 46.58161000000006,6.107110000000006 46.58187000000006,6.106850000000006 46.58210000000006,6.106780000000006 46.58221000000006,6.106820000000006 46.58242000000006,6.107010000000006 46.582810000000066,6.107040000000006 46.583100000000066,6.106920000000006 46.583390000000065,6.1066500000000055 46.58364000000007,6.106350000000005 46.58376000000007,6.106050000000005 46.58380000000007,6.105200000000005 46.58381000000007,6.104500000000005 46.58386000000007,6.103930000000005 46.58403000000007,6.102950000000005 46.58439000000007,6.103730000000005 46.58476000000007,6.104300000000005 46.58497000000007,6.104430000000005 46.58512000000007,6.104470000000005 46.585340000000066,6.104480000000005 46.58564000000007,6.104340000000005 46.58603000000007,6.104210000000005 46.58618000000007,6.104090000000005 46.58629000000007,6.104310000000004 46.58635000000007,6.104390000000004 46.58640000000007,6.104540000000004 46.58656000000007,6.104810000000004 46.58679000000007,6.105050000000004 46.58703000000007,6.1052700000000035 46.58732000000007,6.105570000000004 46.58790000000007,6.1057400000000035 46.58838000000007,6.105820000000003 46.58873000000007,6.105900000000003 46.58914000000007,6.1059300000000025 46.58936000000007,6.105910000000002 46.58959000000007,6.105870000000002 46.59022000000007,6.105920000000002 46.59053000000007,6.106020000000002 46.59086000000007,6.106670000000002 46.591900000000074,6.107140000000002 46.592460000000074,6.107530000000002 46.59266000000007,6.1079000000000025 46.59279000000007,6.107990000000003 46.59288000000007,6.107960000000003 46.593270000000075,6.108040000000003 46.59342000000007,6.108210000000002 46.593630000000076,6.108390000000003 46.593830000000075,6.108680000000002 46.59413000000008,6.109100000000002 46.59435000000008,6.109700000000003 46.59460000000008,6.110360000000003 46.594840000000076,6.1108100000000025 46.59503000000008,6.111090000000003 46.59509000000008,6.1112800000000025 46.59507000000008,6.111590000000002 46.59499000000008,6.111910000000003 46.59495000000008,6.112440000000003 46.59486000000008,6.112560000000003 46.594870000000085,6.1126400000000025 46.594940000000086,6.112680000000003 46.595050000000086,6.112650000000003 46.595200000000084,6.112560000000003 46.595470000000084,6.112420000000003 46.595790000000086,6.112270000000003 46.59602000000009,6.1120500000000035 46.596190000000085,6.111830000000004 46.59633000000009,6.111670000000004 46.59645000000009,6.111580000000004 46.59658000000009,6.111620000000004 46.59669000000009,6.111730000000004 46.596770000000085,6.111940000000004 46.59681000000008,6.112170000000004 46.59681000000008,6.112590000000004 46.59680000000008,6.112960000000005 46.59677000000008,6.113340000000004 46.59668000000008,6.113650000000004 46.59657000000008,6.113750000000004 46.596560000000075,6.114180000000004 46.59670000000008,6.114840000000004 46.59707000000007,6.115270000000003 46.59738000000007,6.115680000000003 46.59767000000007,6.116280000000003 46.59805000000007,6.116730000000003 46.59820000000007,6.117700000000003 46.59858000000007,6.118300000000003 46.59883000000007,6.118790000000003 46.59895000000007,6.119580000000004 46.599200000000074,6.120090000000004 46.59955000000007,6.120620000000004 46.60020000000007,6.120900000000004 46.600990000000074,6.121040000000004 46.60145000000007,6.1215500000000045 46.60185000000007,6.1221600000000045 46.60227000000007,6.122780000000004 46.60257000000007,6.123200000000004 46.602690000000074,6.123640000000004 46.60270000000008,6.123820000000005 46.602650000000075,6.124230000000004 46.60252000000008,6.124370000000004 46.602540000000076,6.124540000000004 46.60261000000008,6.125170000000004 46.603010000000076,6.1254900000000045 46.603300000000075,6.125790000000005 46.60358000000007,6.125930000000005 46.60378000000007,6.1260300000000045 46.603990000000074,6.126190000000005 46.604330000000076,6.126550000000004 46.60501000000008,6.126720000000004 46.60521000000008,6.127030000000004 46.605360000000076,6.127480000000004 46.605540000000076,6.127890000000003 46.60579000000008,6.128630000000004 46.60622000000008,6.129380000000004 46.60665000000008,6.129760000000004 46.60690000000008,6.130320000000004 46.60735000000008,6.130550000000004 46.60748000000008,6.130830000000004 46.60764000000008,6.130990000000004 46.60782000000008,6.131410000000004 46.60815000000008,6.132090000000004 46.60865000000008,6.1324600000000045 46.60901000000008,6.132890000000004 46.609640000000084,6.133230000000004 46.610160000000086,6.133500000000004 46.61050000000009,6.133870000000004 46.61106000000009,6.1344300000000045 46.61207000000009,6.134560000000005 46.61232000000009,6.1347100000000045 46.61244000000009,6.134890000000005 46.61250000000009,6.135140000000005 46.61252000000009,6.136090000000005 46.61288000000009,6.136430000000004 46.61302000000009)"
tracks= """[{'lat': 46.83028, 'dist': 0, 'lon': 6.44719, 'ele': 1095.3285854152914}, {'lat': 46.83045, 'dist': 0.00023345235059658522, 'lon': 6.44735, 'ele': 1095.8333890633241}, {'lat': 46.83108, 'dist': 0.0010503366753336508, 'lon': 6.44787, 'ele': 1100.4144731515669}, {'lat': 46.83157, 'dist': 0.0017156185704721586, 'lon': 6.44832, 'ele': 1100.4484384767977}, {'lat': 46.83172, 'dist': 0.0019349356924654344, 'lon': 6.44848, 'ele': 1099.9968500421558}, {'lat': 46.83287, 'dist': 0.004155858923918098, 'lon': 6.45038, 'ele': 1101.9574635434376}, {'lat': 46.83292, 'dist': 0.004267662322793622, 'lon': 6.45048, 'ele': 1102.2882424006871}, {'lat': 46.83294, 'dist': 0.004578306814133565, 'lon': 6.45079, 'ele': 1102.6460464336396}, {'lat': 46.832770000000004, 'dist': 0.005464760422620152, 'lon': 6.4516599999999995, 'ele': 1103.5910383634473}, {'lat': 46.83276, 'dist': 0.005674998383036633, 'lon': 6.4518699999999995, 'ele': 1103.7200637742753}, {'lat': 46.83279, 'dist': 0.006036246220400298, 'lon': 6.452229999999999, 'ele': 1103.9046482667306}, {'lat': 46.83325, 'dist': 0.008146980689725553, 'lon': 6.454289999999999, 'ele': 1109.9942773445403}, {'lat': 46.83346, 'dist': 0.00851317735819927, 'lon': 6.45459, 'ele': 1106.6761060576016}, {'lat': 46.83386, 'dist': 0.009058062667231736, 'lon': 6.45496, 'ele': 1103.4293250037092}, {'lat': 46.8345, 'dist': 0.009802374429866277, 'lon': 6.45534, 'ele': 1107.2786090394229}, {'lat': 46.834849999999996, 'dist': 0.010155927820456968, 'lon': 6.4553899999999995, 'ele': 1111.0103209047807}, {'lat': 46.83559999999999, 'dist': 0.010937528741640258, 'lon': 6.45517, 'ele': 1116.6959383251972}, {'lat': 46.83575999999999, 'dist': 0.011112171233606954, 'lon': 6.4551, 'ele': 1117.5630714592905}, {'lat': 46.83619999999999, 'dist': 0.011687062527677405, 'lon': 6.45473, 'ele': 1120.8134368000281}, {'lat': 46.83702999999999, 'dist': 0.012747486971002229, 'lon': 6.45407, 'ele': 1124.1127313579211}, {'lat': 46.83724999999999, 'dist': 0.01298914789047291, 'lon': 6.45397, 'ele': 1123.3607177712163}, {'lat': 46.83732999999999, 'dist': 0.013071610002982357, 'lon': 6.45395, 'ele': 1123.1331917945747}, {'lat': 46.83741999999999, 'dist': 0.013163805447555455, 'lon': 6.45397, 'ele': 1123.2893557988057}, {'lat': 46.83751999999999, 'dist': 0.013508624240547695, 'lon': 6.45364, 'ele': 1121.72902128188}, {'lat': 46.837439999999994, 'dist': 0.013594064277997947, 'lon': 6.45361, 'ele': 1121.4064871392463}, {'lat': 46.83736, 'dist': 0.013943349261928287, 'lon': 6.453270000000001, 'ele': 1120.1533295888867}, {'lat': 46.83714, 'dist': 0.014462290491740906, 'lon': 6.452800000000001, 'ele': 1121.0563342982862}, {'lat': 46.83688, 'dist': 0.014990684284284779, 'lon': 6.45234, 'ele': 1120.8741510684031}, {'lat': 46.83653, 'dist': 0.01580928064391435, 'lon': 6.4516, 'ele': 1120.1248692797451}, {'lat': 46.83621, 'dist': 0.016221591206477697, 'lon': 6.45134, 'ele': 1118.3513904925985}, {'lat': 46.835950000000004, 'dist': 0.01659642450275594, 'lon': 6.45107, 'ele': 1116.2885550780477}, {'lat': 46.83567000000001, 'dist': 0.017068441451601964, 'lon': 6.45069, 'ele': 1113.276877290702}, {'lat': 46.835100000000004, 'dist': 0.01815070759262431, 'lon': 6.44977, 'ele': 1112.2724062934565}, {'lat': 46.834920000000004, 'dist': 0.01847520720741659, 'lon': 6.4495, 'ele': 1112.5686509325471}, {'lat': 46.83476, 'dist': 0.01869452432941173, 'lon': 6.44935, 'ele': 1112.6970543015834}, {'lat': 46.83467, 'dist': 0.018950844441771118, 'lon': 6.44911, 'ele': 1114.1849888945108}, {'lat': 46.83462, 'dist': 0.019264850811133348, 'lon': 6.4488, 'ele': 1115.9226413114839}, {'lat': 46.834630000000004, 'dist': 0.019614993639133743, 'lon': 6.44845, 'ele': 1117.447421798576}, {'lat': 46.834590000000006, 'dist': 0.020086692695736416, 'lon': 6.44798, 'ele': 1118.0866126108249}, {'lat': 46.834520000000005, 'dist': 0.02038502137353984, 'lon': 6.447690000000001, 'ele': 1118.1804108694676}, {'lat': 46.834410000000005, 'dist': 0.02060456635754046, 'lon': 6.447500000000001, 'ele': 1117.9270839880255}, {'lat': 46.834140000000005, 'dist': 0.02104660707964679, 'lon': 6.447150000000001, 'ele': 1117.1129064113325}, {'lat': 46.83395, 'dist': 0.021393305796115616, 'lon': 6.446860000000001, 'ele': 1117.6629912367091}, {'lat': 46.83373, 'dist': 0.022013628292886247, 'lon': 6.446280000000001, 'ele': 1120.8318638462156}, {'lat': 46.83368, 'dist': 0.022327634662248477, 'lon': 6.445970000000001, 'ele': 1123.1524482800214}, {'lat': 46.8337, 'dist': 0.02249880708993441, 'lon': 6.445800000000001, 'ele': 1125.4451508364102}, {'lat': 46.83363, 'dist': 0.022682654853043053, 'lon': 6.445630000000001, 'ele': 1126.1432128193744}, {'lat': 46.83347, 'dist': 0.022931049700011145, 'lon': 6.445440000000001, 'ele': 1125.872839549178}, {'lat': 46.8333, 'dist': 0.02314505904559943, 'lon': 6.445310000000001, 'ele': 1126.2433440499433}, {'lat': 46.83299, 'dist': 0.02350352801217734, 'lon': 6.445130000000001, 'ele': 1126.7014267411153}, {'lat': 46.83268, 'dist': 0.02382368422404785, 'lon': 6.445050000000001, 'ele': 1124.7753354754659}, {'lat': 46.83240000000001, 'dist': 0.024370767398709633, 'lon': 6.444580000000001, 'ele': 1127.2507632000531}, {'lat': 46.832260000000005, 'dist': 0.024606775873134753, 'lon': 6.444390000000001, 'ele': 1127.1539242564343}, {'lat': 46.83189000000001, 'dist': 0.02512301225309775, 'lon': 6.4440300000000015, 'ele': 1124.0676179503153}, {'lat': 46.831590000000006, 'dist': 0.02559162723365374, 'lon': 6.443670000000002, 'ele': 1123.1740942003005}, {'lat': 46.83151000000001, 'dist': 0.025752872388618234, 'lon': 6.443530000000002, 'ele': 1123.7428208247934}, {'lat': 46.83137000000001, 'dist': 0.025937263277765396, 'lon': 6.443410000000002, 'ele': 1124.2500362168403}, {'lat': 46.83128000000001, 'dist': 0.02602726327776554, 'lon': 6.443410000000002, 'ele': 1123.6138413339038}, {'lat': 46.83072000000001, 'dist': 0.026625343539937892, 'lon': 6.443620000000002, 'ele': 1114.1977689133378}, {'lat': 46.83061000000001, 'dist': 0.02673534353993728, 'lon': 6.443620000000002, 'ele': 1112.5968133213864}, {'lat': 46.83015000000001, 'dist': 0.027392990861833316, 'lon': 6.443150000000002, 'ele': 1111.2183619181565}, {'lat': 46.83008000000001, 'dist': 0.027473613439317215, 'lon': 6.443110000000002, 'ele': 1111.0079919289042}, {'lat': 46.83000000000001, 'dist': 0.02755423601679715, 'lon': 6.443100000000002, 'ele': 1110.5466980007825}, {'lat': 46.829920000000016, 'dist': 0.027690250721882945, 'lon': 6.443210000000002, 'ele': 1109.5605976704892}, {'lat': 46.82989000000001, 'dist': 0.02782366736252515, 'lon': 6.443340000000003, 'ele': 1108.7946753107663}, {'lat': 46.829990000000016, 'dist': 0.02871926771982787, 'lon': 6.444230000000003, 'ele': 1103.5379685954933}, {'lat': 46.830030000000015, 'dist': 0.029012013343193435, 'lon': 6.4445200000000025, 'ele': 1103.3247167190295}, {'lat': 46.830230000000014, 'dist': 0.02961608287561459, 'lon': 6.445090000000002, 'ele': 1103.1545346264913}, {'lat': 46.830320000000015, 'dist': 0.030045617507512997, 'lon': 6.445510000000002, 'ele': 1101.9375523649474}, {'lat': 46.830280000000016, 'dist': 0.03172609363052131, 'lon': 6.447190000000003, 'ele': 1095.3285854153432}]
"""

import matplotlib
matplotlib.use('Agg')

from PIL import Image, ImageDraw, ImageFont
import sys
#from lxml import etree
import math
from math import floor, ceil, sqrt
import sys, random, re, zipfile
from io import StringIO
import urllib

from osgeo import gdal, gdalnumeric

#from legen2Html import ...
import os, os.path
import random
import atexit


import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

from matplotlib.collections import PolyCollection
from matplotlib.colors import colorConverter
from matplotlib import rc
import numpy as np
import pdb

if os.path.isdir("/home/website"):
	SRTMFilesDir='/home/website/DEM/tiles/'
else:
	SRTMFilesDir='/home/admin/SSD/DEM/'
PIL_images_dir = '/var/www/tmp/' 

#TODO:
# Clean and master the elevation code

# Make a ideal track with a point every 10m, to average
# slopes and cumulated climb over 100m
class SrtmTiff(object):
    """
    Provides an interface to SRTM elevation data stored in GeoTIFF file.
    
    Based on code from `eleserver` code by grahamjones139.
    http://code.google.com/p/eleserver/
    """
    tile = {}
    
    def __init__(self, filename):
        """
        Reads the GeoTIFF files into memory ready for processing.
        """
        self.tile = self.load_tile(filename)
    
    def load_tile(self, filename):
        """
        Loads a GeoTIFF tile from disk and returns a dictionary containing
        the file data, plus metadata about the tile.

        The dictionary returned by this function contains the following data:
            xsize - the width of the tile in pixels.
            ysize - the height of the tile in pixels.
            lat_origin - the latitude of the top left pixel in the tile.
            lon_origin - the longitude of the top left pixel in the tile.
            lat_pixel - the height of one pixel in degrees latitude.
            lon_pixel - the width of one pixel in degrees longitude.
            N, S, E, W - the bounding box for this tile in degrees.
            data - a two dimensional array containing the tile data.

        """
        dataset = gdal.Open(filename)
        geotransform = dataset.GetGeoTransform()
        xsize = dataset.RasterXSize
        ysize = dataset.RasterYSize
        lon_origin = geotransform[0]
        lat_origin = geotransform[3]
        lon_pixel = geotransform[1]
        lat_pixel = geotransform[5]
        self.geotransform=geotransform
        retdict = {
            'xsize': xsize,
            'ysize': ysize,
            'lat_origin': lat_origin,
            'lon_origin': lon_origin,
            'lon_pixel': lon_pixel,
            'lat_pixel': lat_pixel,
            'N': lat_origin - lat_pixel*ysize,
            'S': lat_origin,
            'W': lon_origin + lon_pixel*xsize,
            'E': lon_origin,
            'dataset': dataset,
            }
        
        return retdict  
    
    def get_elevation(self, lat, lon):
        """
        Returns the elevation in metres of point (lat, lon).
        
        Uses bilinar interpolation to interpolate the SRTM data to the
        required point.
        """
        
        # ~ print("lon, lat: ", lon, lat)
        # ~ print("geotransform : ", gdal.InvGeoTransform(self.geotransform))
        col_f, row_f = gdal.ApplyGeoTransform(gdal.InvGeoTransform(self.geotransform), lon, lat)
        
        col = int(col_f)
        row = int(row_f)
        
        # NOTE - THIS IS A FIDDLE TO STOP ERRORS AT THE EDGE OF
        # TILES - IT IS NO CORRECT - WE SHOULD GET TWO POINTS 
        # FROM THE NEXT TILE.
        #if row==5999: row=5998
        #if col==5999: col=5998
        # ~ if row>3600: row=3600
        # ~ if row>3600: row=3600
        # ~ if col>3600: col=3600
        # ~ if col>3600: col=3600
        
        htarr = gdalnumeric.DatasetReadAsArray(self.tile['dataset'], col, row, 2, 2)
        
        height = bilinear_interpolation(htarr[0][0], htarr[0][1], htarr[1][0], htarr[1][1],
                                       row_f-row, col_f-col)

        return height


class SrtmLayer(object):
    """
    Provides an interface to SRTM elevation data stored in GeoTIFF files.
    
    Files are automaticly downloaded from mirror server and cached in
    `~/.gpxtools` directory.
    
    Sample usage:
    
        >>> lat = 52.25
        >>> lon = 16.75
        >>> srtm = SrtmLayer()
        >>> ele = srtm.get_elevation(lat, lon)
        >>> round(ele, 4)
        63.9979
        
    """
    _cache = {}
    
    def _unzip_srtm_tiff(self, srtm_path):
        """
        Download and unzip GeoTIFF file.
        """
        #insert unzip for hgt.zip
        z = zipfile.ZipFile(srtm_path+'.zip')
        out_file = open(srtm_path, 'w')
        out_file.write(z.read(os.path.basename(srtm_path)))
        
        z.close()
        out_file.close()
        
    def get_srtm_filename(self, lat, lon):
        """
        Filename of GeoTIFF file containing data with given coordinates.
        """
        """colmin = floor((6000 * (180 + lon)) / 5)
        rowmin = floor((6000 * (60 - lat)) / 5)
    
        ilon = ceil(colmin / 6000.0)
        ilat = ceil(rowmin / 6000.0)"""
        ilon = (floor(lon))
        ilat = (floor(lat+1))
        
        #~ if lon > 0 and lat > 0 and lat <60 :return 'N%02dE%03d.tif' % (ilat, ilon)
        #~ if lon < 0 and lat > 0 and lat <60:return 'N%02dW%03d.tif' % (ilat, ilon)
        #~ if lon > 0 and lat < 0 :return 'S%02dE%03d.tif' % (ilat, ilon)
        #~ if lon < 0 and lat < 0 :return 'S%02dW%03d.tif' % (ilat, ilon)
        #~ if lon > 0 and lat > 0 and lat >=60 :return 'as_N%02dE%01d.tif' % (ilat, ilon)
        #~ if lon < 0 and lat > 0 and lat >=60:return 'as_N%02dE-%01d.tif' % (ilat, ilon)
        filename = 'out_dem/out_%01d-%01d.tif' % (ilat, ilon)
        
        return filename
        
    def get_elevation(self, lat, lon):
        """
        Returns the elevation in metres of point (lat, lon).
        """
        # ~ srtm_filename = self.get_srtm_filename(lat, lon)
        # ~ srtm_path = os.path.join(SRTMFilesDir, srtm_filename)
        
        # ~ if not os.path.isfile(srtm_path):
            # ~ self._unzip_srtm_tiff(srtm_path)
        
        srtm_path = "/4TB_NVME/DEM_2023/DEM_3.0/dem_03-00_4326_ZSTD_3_CP.tif"
        
        # ~ srtm=SrtmTiff(srtm_path)
        return srtm.get_elevation(lat, lon)
srtm_path = "/home/admin/SSD/relief/dem_03-00_4326_ZSTD_3_CP.tif"
srtm=SrtmTiff(srtm_path)

def goodbye():
    return 'goodbye'
    
def application(environ,start_response):
    try:
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except (ValueError):
        request_body_size = 0
    request =urllib.parse.unquote(environ['QUERY_STRING'], encoding='utf-8', errors='replace')
    size = 'small'
    if request.find('size=big') !=-1:
        size = 'big'
    
    color = 'black'
    if request.find('color=') !=-1:
        color=request.split('color=')[1]
        if color.find('&'): color=color.split('&')[0]
    
    data = environ['wsgi.input'].read(request_body_size)
    tracks=listTracks(data.decode('utf-8'))
    
    for track in tracks:
        for d in track:
            if d['lat'] > 71.9999:
                response_body = 'Sorry, dataset does not contain elevation data beyond 72 deg. latitude'
                status = '200 OK'
                response_headers = [('Content-Type', 'text/plain'),('Content-Length', str(len(response_body)))]
                start_response(status, response_headers)
                return [response_body]

    tracks=processData(tracks)
    
    response_body = createPics(tracks, size, color)
    status = '200 OK'
    response_headers = [('Content-Type', 'image/png'),('Content-Length', str(len(response_body)))]
    start_response(status, response_headers)
    return [bytes(response_body, 'utf-8')]
    
def handle(req):
    from mod_python import apache, util
    #req.content_type = 'text/plain'
    
    #return data
    #return len(data)
    data= req.readline()
    tracks=listTracks(data.decode('utf-8'))
    
    for track in tracks:
        for d in track:
            if d['lat'] > 71.9999:
                req.content_type = 'text/plain'
                req.write('Sorry, dataset does not contain elevation data beyond 72 deg. latitude')
                return apache.OK

    tracks=processData(tracks)
    req.content_type = 'image/png'
    req.write(createPics(tracks))
    #req.write(str(tracks))
    return apache.OK

#
def createPics(tracks, size, color):

    fontfile = os.path.join(os.path.dirname(__file__) , 'Fonts/FreeSans.ttf')

    randFilename = random.randrange(0, 100001, 2)
    #PIL_images_dir = os.path.join(os.path.dirname(__file__) , 'tmp/')
    profile_filename = 'profile'+str(randFilename)
    
    # serialize tracks
    track=[]
    for t in tracks:
        
        track.extend(t)
        track.append({'lat': np.nan, 'dist': np.nan, 'lon': np.nan, 'ele': np.nan})
    
    
    lats=[]
    lons=[]
    eles=[]
    dists=[]
    
    
    for t in track:
        lats.append(t['lat'])
        lons.append(t['lon'])
        eles.append(t['ele'])
        dists.append(t['dist'])
    #~ plt.plot(lons,lats)
    #~ plt.show()
    
    #~ fig = plt.figure()
    #~ ax = fig.gca(projection='3d')
    #~ ax.fill(lons,lats,eles,'r')
    #~ plt.show()
    #~ exit(0)
    xs=lons
    ys=lats
    zs=eles
    ls=dists
    
    dpi=100
    width =200.
    width3D=200.
    height=100.
    width2D=140.
    if size == 'big':
        width=350.
        height=150.
        width2D=width/2
        width3D=width/2
        
    col = (0,0,0)
    try: col = colorConverter.to_rgb(color)
    except: pass # cheap colorparser
    
    ############################
    ### 3D plot
    ############################
    # Code to convert data in 3D polygons
    v = []
    h=min(zs)
    for k in range(0, len(xs) - 1):
        x = [xs[k], xs[k+1], xs[k+1], xs[k]]
        y = [ys[k], ys[k+1], ys[k+1], ys[k]]
        z = [zs[k], zs[k+1],       h,     h]
        v.append(list(zip(x, y, z)))
    poly3dCollection = Poly3DCollection(v,facecolors=(0.0,0.,0.1,0.5),edgecolors='none')
    # Code to plot the 3D polygons
    plt.rcParams['axes.labelsize']= 1
    fig = plt.figure(figsize=(width3D/dpi,height/dpi),dpi=dpi)
    #~ ax = Axes3D(fig)
    ax = fig.gca(projection='3d')
    ax.add_collection3d(poly3dCollection)
    
    ax.set_zlim([min(zs), max(zs)])
    
    # set equal scale on x and y
    ex = max(xs)-min(xs)
    mx = (max(xs)+min(xs))/2
    ey = max(ys)-min(ys)
    my = (max(ys)+min(ys))/2
    if (ex > ey) :
        ax.set_ylim(my - ex/2 , my + ex/2)
        ax.set_xlim(mx - ex/2 , mx + ex/2)
    else :
        ax.set_xlim(mx - ey/2, mx + ey/2)
        ax.set_ylim(my - ey/2 , my + ey/2)
    
    #~ ax.set_axis_off()
    # Get rid of the spines
    #~ ax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0)) 
    #~ ax.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0)) 
    # Get rid of the ticks 
    #~ ax.zaxis._axinfo['tick']['inward_factor'] = 0
    #~ ax.zaxis._axinfo['tick']['outward_factor'] = 0.2
    ax.set_xticks([])                               
    ax.set_yticks([])         
    ax.set_zticks([int(min(zs)), int(max(zs))])
    ax.set_zticks([])  
    zed = [tick.label.set_fontsize(7) for tick in ax.zaxis.get_major_ticks()]
    ax.elev=60
    plt.tight_layout(pad=0.1)
    #~ plt.axis('equal')
    fig.savefig(PIL_images_dir+profile_filename+'-3d.png',dpi=dpi)
    #plt.show()
    
    ############################
    ### Way plot
    ############################
    mercxs = [ merc_x(x) for x in xs]
    mercys = [ merc_y(y) for y in ys]
    
    fig, ax = plt.subplots()
    fig.set_size_inches(width2D/dpi,width2D/dpi, forward=True)
    fig.set_dpi(dpi)
    ax.set_xticks([]) 
    ax.set_yticks([])
    
    plt.axis('off')
    
    ax.plot(mercxs,mercys, alpha=0.6, linewidth=3, color=col)
    
    
    # set equal scale on x and y
    ex = (max(mercxs)-min(mercxs))*1.1
    mx = (max(mercxs)+min(mercxs))/2
    ey = (max(mercys)-min(mercys))*1.1
    my = (max(mercys)+min(mercys))/2
    
    ax.set_xlim([min(mercxs)-ex/10, max(mercxs)+ex/10])
    ax.set_ylim([min(mercys)-ey/10, max(mercys)+ey/10])
    if (ex > ey) :
        ax.set_ylim(my - ex/2 , my + ex/2)
    else :
        ax.set_xlim(mx - ey/2, mx + ey/2)
    
    for n in [int(len(mercxs)/4), 2*int(len(mercxs)/4), 3*int(len(mercxs)/4)] :
        if n < len(mercxs)-1:
            l=sqrt((max(mercxs)-min(mercxs))**2+((max(mercys)-min(mercys))**2))/30
            a=math.atan2((mercys[n+1]-mercys[n]),(mercxs[n+1]-mercxs[n]))
            y2=mercys[n]+math.sin(a)*l
            x2=mercxs[n]+math.cos(a)*l
            
            arrow=dict(facecolor=(0,0,0,0.7), edgecolor=(1,1,1,0), headwidth = 7, width=2, headlength = 3) #, frac = 0.7
            plt.annotate(text='',xy=(x2,y2),xytext=(mercxs[n],mercys[n]),arrowprops=arrow)
    ax.plot(mercxs[0],mercys[0],'o',color=(0,0,0), alpha=0.6)
    plt.tight_layout(pad=0.1)
    fig.savefig(PIL_images_dir+profile_filename+'-2d.png',dpi=dpi)
    #~ plt.show()
    
    ############################
    ### profileplot
    ############################
    
    #Add points to 'close' the profile
    zs.insert(0,min(zs))
    ls.insert(0,ls[0])
    
    zs.append(min(zs))
    ls.append(ls[-1])
    
    zs.append(zs[0])
    ls.append(ls[0])
    
    while np.nan in zs:
        n = zs.index(np.nan)
        zs[n]=zs[n-1]
    while np.nan in ls:
        n = ls.index(np.nan)
        ls[n]=ls[n-1]
    
    v= list(zip(ls,zs))
    poly = PolyCollection([v],facecolors=(0.0,0.,0.1,0.3),edgecolors='none')
    
    
    fig, ax = plt.subplots()
    fig.set_size_inches(width/dpi,height/dpi, forward=True)
    fig.set_dpi(dpi)
    
    #~ plt.axis('off')
    
    ax.spines['bottom'].set_color((1.0, 1.0, 1.0, 0.5)) 
    ax.spines['top'].set_color((1.0, 1.0, 1.0, 0)) 
    ax.spines['left'].set_color((1.0, 1.0, 1.0, 0)) 
    ax.spines['right'].set_color((1.0, 1.0, 1.0, 0)) 
    ax.tick_params(axis='y', colors=(0,0,0,0.6), which='minor')
    ax.tick_params(axis='y', colors=(0,0,0,0.7), which='major')
    
    ax.add_collection(poly)
    
    ax.set_xlim(min(ls),max(ls))
    if max(zs)-min(zs) > 20:
        ax.set_ylim(min(zs),max(zs))
    else: 
        ax.set_ylim(min(zs),min(zs)+20)
    

    ax.set_xticks([])                               
    
    ax.get_yaxis().get_major_formatter().set_useOffset(False)

    majorFormatter = matplotlib.ticker.FormatStrFormatter('%d')
    ax.yaxis.set_major_formatter(majorFormatter)
    
    t = ax.get_yticks()
    t = np.insert(t[1:-1],0,min(zs))
    t = np.append(t, max(zs))

    ax.set_yticks(t,minor=False)
    
    zed = [tick.label.set_fontsize(6) for tick in ax.yaxis.get_major_ticks()]
    zed = [tick.label.set_fontsize(5.5) for tick in ax.yaxis.get_minor_ticks()]
    
    ax.grid(axis = "y")
    
    plt.tight_layout(pad=0.1)
    fig.savefig(PIL_images_dir+profile_filename+'-ele.png',dpi=dpi)
    
    return profile_filename
    

def gen_html(profile):
    htmlfile = StringIO.StringIO()
    
    htmlfile.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n\
    <HTML>\n<HEAD>\n\
    <META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=utf-8\">\n\
    <TITLE></TITLE>\n<META NAME=\"GENERATOR\" CONTENT=\"elevation profile computation via mod_python\">\n\
    </HEAD>\n\
    <BODY LANG=\"fr-CH\" DIR=\"LTR\">\n")
    #     <link rel=\"stylesheet\" type=\"text/css\" href=\"/test_ol_vec/profile.css\" >\n\
    
    htmlfile.write("<IMG SRC=\"http://dev-yves.dyndns.org/pistes-nordiques-frontend/images/"+profile+"\" ALIGN=ABSMIDDLE>")
                    #+"<IMG SRC=\"http://dev-yves.dyndns.org/pistes-nordiques-frontend/images/"+tour+"\" ALIGN=ABSMIDDLE>")
    htmlfile.write("</BODY>\n</HTML>")
    htmlfile.seek(0)
    return htmlfile
    
#
def bilinear_interpolation(tl, tr, bl, br, a, b):
    """
    Based on equation from:
    http://en.wikipedia.org/wiki/Bilinear_interpolation
    
    :Parameters:
        tl : int
            top-left
        tr : int
            top-right
        bl : int
            buttom-left
        br : int
            bottom-right
        a : float
            x distance to top-left
        b : float
            y distance to top-right

    :Returns: (float)
        interpolated value
    """
    b1 = tl
    b2 = bl - tl
    b3 = tr - tl
    b4 = tl - bl - tr + br

    return b1 + b2 * a + b3 * b + b4 * a * b

#
def linearDist(lat1, lon1, lat2, lon2):

    # Convert latitude and longitude to 
    # spherical coordinates in radians.
    degrees_to_radians = math.pi/180.0
        
    # phi = 90 - latitude
    phi1 = (90.0 - lat1)*degrees_to_radians
    phi2 = (90.0 - lat2)*degrees_to_radians
        
    # theta = longitude
    theta1 = lon1*degrees_to_radians
    theta2 = lon2*degrees_to_radians
        
    # Compute spherical distance from spherical coordinates.
        
    # For two locations in spherical coordinates 
    # (1, theta, phi) and (1, theta, phi)
    # cosine( arc length ) = 
    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
    # distance = rho * arc length
    
    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + 
           math.cos(phi1)*math.cos(phi2))
    arc = math.acos( clamp(cos,-1,1)) # clamp will avoid rounding error that would lead cos outside of [-1,1] 'Math domain error'

    # Remember to multiply arc by the radius of the earth 
    # in your favorite set of units to get length.
    
    return arc*6371 #return km
    
    lat1 = math.radians(lat1)
    lon1 = math.radians(lon1)
    lat2 = math.radians(lat2)
    lon2 = math.radians(lon2)

    
    d = math.acos(math.sin(lat1)*math.sin(lat2) + \
                  math.cos(lat1)*math.cos(lat2) * \
                  math.cos(lon2-lon1)) * 6371 
    return d
#
def clamp(value, minvalue, maxvalue):
    return max(minvalue, min(value, maxvalue))
#
def merc_x(lon):
  r_major=6378137.000
  return r_major*math.radians(lon)

def merc_y(lat):
  if lat>89.5:lat=89.5
  if lat<-89.5:lat=-89.5
  r_major=6378137.000
  r_minor=6356752.3142
  temp=r_minor/r_major
  eccent=math.sqrt(1-temp**2)
  phi=math.radians(lat)
  sinphi=math.sin(phi)
  con=eccent*sinphi
  com=eccent/2
  con=((1.0-con)/(1.0+con))**com
  ts=math.tan((math.pi/2-phi)/2)/con
  y=0-r_major*math.log(ts)
  return y
#
def llDistance(ll1,ll2):
    return math.sqrt((ll2['lon']-ll1['lon'])**2+(ll2['lat']-ll1['lat'])**2)

def listTracks(data):
    # split the multiline into a list of line
    lines = re.findall('\([-0-9., ]+\)',data)
    tracks=[]
    for line in lines:
        track=[]
        # split the line into a list of lon lat
        lon_lat = line.replace('(','').replace(')','').split(',')
        
        track.append({'lon': float(lon_lat[0].split(' ')[0]), 
                      'lat':float(lon_lat[0].split(' ')[1])})
        
        for i in range(1,len(lon_lat)):
            t={'lon': float(lon_lat[i].split(' ')[0]), 
                'lat':float(lon_lat[i].split(' ')[1])}
            lim=0.02
            segLength=llDistance(track[i-1],t)
            if segLength < lim:
                track.append(t)
            else:
                # add a point every 0.002deg at least
                n = int(segLength/lim)
                
                lon1=track[-1]['lon']
                lat1=track[-1]['lat']
                lon2=t['lon']
                lat2=t['lat']
                a = (lat2-lat1)/(lon2-lon1)
                b= lat1-a*lon1
                DLON=(lon2-lon1)/float(n)
                for j in range(0,n+1):
                    LON=lon1+float(j)*DLON
                    LAT=a*LON+b
                    track.append({'lon': LON, 'lat':LAT})
                    
        tracks.append(track)
    return tracks

def processData(tracks):
    #outFile=open('out.csv','w') # XX
    
    _srtm = SrtmLayer()
    dist = 0
    for track in tracks:
        lstEle = 0
        for pt in track:
            if pt['lat'] == 0 and pt['lon'] ==0 : pt['ele']= 0
            else:
                pt['ele']=_srtm.get_elevation(float(pt['lat']),float(pt['lon']))
                
            
        track[0]['dist']=dist
    
        for i in range(1,len(track)):
                track[i]['dist']=track[i-1]['dist']+llDistance(track[i],track[i-1])
                dist=track[i]['dist']
    return tracks
#
def addtionnalComputation(track):
    # We'll see later accuracy problem and slope computation
    positiveSlope=0
    maxPositiveSlope=0
    positiveDistance=0
    negativeSlope=0
    negativeDistance=0
    maxNegativeSlope=0
    for i in range(1, len(track)):
        if track[i]['ele'] > track[i-1]['ele']:
            positiveSlope += track[i]['ele'] - track[i-1]['ele']
            positiveDistance += track[i]['dist'] - track[i-1]['dist']
            try:
                slope = (track[i]['ele'] - track[i-1]['ele'])/(track[i]['dist'] - track[i-1]['dist'])/10
                if slope > maxPositiveSlope: maxPositiveSlope = slope
            except: pass
        else:
            negativeSlope += track[i-1]['ele'] - track[i]['ele']
            negativeDistance += track[i]['dist'] - track[i-1]['dist']
            try:
                slope = (track[i-1]['ele'] - track[i]['ele'])/(track[i]['dist'] - track[i-1]['dist'])/10
                if slope > maxNegativeSlope: maxNegativeSlope = slope
            except: pass
    
    positiveSlopeValue=" %.fm" % positiveSlope
    maxPositiveSlopeValue=" %.f %%" % maxPositiveSlope
    positiveDistanceValue=" %.fkm" % positiveDistance
    negativeSlopeValue=" %.fm" % negativeSlope
    negativeDistanceValue=" %.fkm" % negativeDistance
    maxNegativeSlopeValue=" %.f %%" % maxNegativeSlope
    return None
#
if __name__ == "__main__":
    SRTMFilesDir=''
    PIL_images_dir = '/var/tmp/' 
    if len(sys.argv) > 1:
        f=open(sys.argv[1],'r')
        data=f.read()
    else:
        data=test
    tracks=listTracks(data.decode('utf-8'))
    tracks=processData(tracks)
    for track in tracks:
        for d in track:
            if d['lat'] > 71.9999:
                print('Sorry, dataset does not contain elevation data beyond 72 deg. latitude')
    createPics(tracks,'big','blue')

        
